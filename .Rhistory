x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top",
title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s"))) +
ggplot2::theme(legend.title = ggplot2::element_text())
#g <- g + ggplot2::theme(plot.margin = grid::unit(c(0, 0, 0, 0), "lines"))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
themeJasp
library(JASPgraphs)
rm(list = ls())
library(JASPgraphs)
library(grid)
library(gridExtra)
library(colorspace)
library(ggplot2)
grid_arrange_shared_legend <- function(..., plotList = NULL, nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
if (is.null(plotList)) {
plots <- list(...)
} else {
plots <- plotList
}
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
set.seed(6+4+2017)
ni = 100
nl = 4
# some group indicator
ug <- 1:nl
g <- sort(rep_len(ug, length.out = ni))
# contrast matrix
contr <- matrix(nrow = ni, ncol = ni)
contr[, 1] <- 1 # positive manifold
progLen <- 0
j <- 0
for (i in 2:nl) {
while(anyNA(contr[, 1:i]) || prod(abs(La.svd(contr[, 1:i])$d) > 1e-08) == 0) {
tmp <- sample(ug, 2)
contr[, i] <- 1*(g == tmp[1]) - 1*(g == tmp[2])
j <- j + 1
if (j %% 10^floor(log10(j)) == 0) {
replicate(progLen,  cat('\010')) # delete old message
cat(j, "\n")
progLen <- 3 + floor(log10(j))
}
}
}
contr[, -(1:nl)] <- rnorm((ni - nl)*ni)
prod(abs(La.svd(contr)$d) > 1e-08) == 0 # should return FALSE
# eigenvectors
Q <- thesis::orthContrast(contr)
L <- c(seq(20, 1, length.out = nl), sort(runif(ni - nl, .01, .5), decreasing = TRUE))
# cn <- cbind(1, rep(-1:1, each = 5), matrix(rnorm(15*13, sd = .3), 15, 13))
# Q <- qr.Q(qr(cn));
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation")
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
# ggplot2::theme(legend.title = ggplot2::element_text(size = 18),
#                plot.title = element_text()
#g <- g + ggplot2::theme(plot.margin = grid::unit(c(0, 0, 0, 0), "lines"))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top")
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
# ggplot2::theme(legend.title = ggplot2::element_text(size = 18),
#                plot.title = element_text()
#g <- g + ggplot2::theme(plot.margin = grid::unit(c(0, 0, 0, 0), "lines"))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top")
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
ggplot2::theme(legend.title = ggplot2::element_text(vjust = .5))
#g <- g + ggplot2::theme(plot.margin = grid::unit(c(0, 0, 0, 0), "lines"))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top", title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
ggplot2::theme(legend.title = ggplot2::element_text(vjust = .5))
#g <- g + ggplot2::theme(plot.margin = grid::unit(c(0, 0, 0, 0), "lines"))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top", title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
setwd("C:/Users/donvd/_Laptop/ResMas/Thesis/Bayesian Reliability/paper/")
dir()
setwd("C:/Users/donvd/_Laptop/ResMas/Thesis/Bayesian Reliability/paper/figures")
48/8
32/8
m = 1
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
dev.off()
m = 4
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
dev.off()
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
dev.off()
Q <- thesis::orthContrast(contr)
L <- c(seq(20, 5, length.out = nl), sort(runif(ni - nl, .01, .5), decreasing = TRUE))
# cn <- cbind(1, rep(-1:1, each = 5), matrix(rnorm(15*13, sd = .3), 15, 13))
# Q <- qr.Q(qr(cn));
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top", title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1, nrow = 2, ncol = 3)
dev.off()
for (i in 1:10) print(i)
for (i in 1:10) cat(i)
setwd("C:/Users/donvd/_Laptop/Werk/JASP/plotPackage/JASPgraphs")
rm(list = ls())
library(JASPgraphs)
library(grid)
library(gridExtra)
library(colorspace)
library(ggplot2)
setwd("C:/Users/donvd/_Laptop/ResMas/Thesis/Bayesian Reliability/paper/figures")
grid_arrange_shared_legend <- function(..., plotList = NULL, nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
if (is.null(plotList)) {
plots <- list(...)
} else {
plots <- plotList
}
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
set.seed(6+4+2017)
ni = 100
nl = 4
# some group indicator
ug <- 1:nl
g <- sort(rep_len(ug, length.out = ni))
# contrast matrix
contr <- matrix(nrow = ni, ncol = ni)
contr[, 1] <- 1 # positive manifold
progLen <- 0
j <- 0
for (i in 2:nl) {
while(anyNA(contr[, 1:i]) || prod(abs(La.svd(contr[, 1:i])$d) > 1e-08) == 0) {
tmp <- sample(ug, 2)
contr[, i] <- 1*(g == tmp[1]) - 1*(g == tmp[2])
j <- j + 1
if (j %% 10^floor(log10(j)) == 0) {
replicate(progLen,  cat('\010')) # delete old message
cat(j, "\n")
progLen <- 3 + floor(log10(j))
}
}
}
contr[, -(1:nl)] <- rnorm((ni - nl)*ni)
prod(abs(La.svd(contr)$d) > 1e-08) == 0 # should return FALSE
# eigenvectors
Q <- thesis::orthContrast(contr)
L <- c(seq(20, 5, length.out = nl), sort(runif(ni - nl, .01, .5), decreasing = TRUE))
# cn <- cbind(1, rep(-1:1, each = 5), matrix(rnorm(15*13, sd = .3), 15, 13))
# Q <- qr.Q(qr(cn));
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top", title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3, position = "left")
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3, position = "right")
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3, position = "right")
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 2, ncol = 3)
dev.off()
rm(list = ls())
library(JASPgraphs)
library(grid)
library(gridExtra)
library(colorspace)
library(ggplot2)
setwd("C:/Users/donvd/_Laptop/ResMas/Thesis/Bayesian Reliability/paper/figures")
grid_arrange_shared_legend <- function(..., plotList = NULL, nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
if (is.null(plotList)) {
plots <- list(...)
} else {
plots <- plotList
}
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
set.seed(6+4+2017)
ni = 100
nl = 4
# some group indicator
ug <- 1:nl
g <- sort(rep_len(ug, length.out = ni))
# contrast matrix
contr <- matrix(nrow = ni, ncol = ni)
contr[, 1] <- 1 # positive manifold
progLen <- 0
j <- 0
for (i in 2:nl) {
while(anyNA(contr[, 1:i]) || prod(abs(La.svd(contr[, 1:i])$d) > 1e-08) == 0) {
tmp <- sample(ug, 2)
contr[, i] <- 1*(g == tmp[1]) - 1*(g == tmp[2])
j <- j + 1
if (j %% 10^floor(log10(j)) == 0) {
replicate(progLen,  cat('\010')) # delete old message
cat(j, "\n")
progLen <- 3 + floor(log10(j))
}
}
}
contr[, -(1:nl)] <- rnorm((ni - nl)*ni)
prod(abs(La.svd(contr)$d) > 1e-08) == 0 # should return FALSE
# eigenvectors
Q <- thesis::orthContrast(contr)
L <- c(seq(20, 5, length.out = nl), sort(runif(ni - nl, .01, .5), decreasing = TRUE))
# cn <- cbind(1, rep(-1:1, each = 5), matrix(rnorm(15*13, sd = .3), 15, 13))
# Q <- qr.Q(qr(cn));
loopVals <- c(1, 2, 3, 4, ni)
gList1 <- vector("list", length = length(loopVals) + 1)
xB <- yB <- c(1, 100)
for (i in loopVals) {
covMat <- Q[, 1:i, drop = FALSE] %*% diag(L[1:i], nrow = i, ncol = i) %*% t(Q[, 1:i, drop = FALSE])
corMat <- Matrix::cov2cor(covMat)
g <- drawCanvas(xName = "", yName = "", xBreaks = xB, yBreaks = yB)
g <- drawHeatmap(graph = g, dat = corMat, show.legend = TRUE, interpolate = FALSE, jaspColors = FALSE)
g <- themeJasp(g, legend.position = "right") +
scale_fill_gradientn(
name = "Correlation",
breaks = seq(-1, 1, .5),
colours = diverge_hcl(7, h = c(130, 43), c = 100, l = c(70, 90)),
limits = c(-1, 1),
guide = guide_colourbar(title = "Correlation", title.position = "top", title.hjust = .5)
) +
ggplot2::ggtitle(sprintf("%d eigenvector%s", i, ifelse(i==1, "", "s")))
gList1[[which(loopVals == i)]] <- g
}
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE)
g <- themeJasp(g)
gList1[[6]] <- g
x11(width = 480, height = 320)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
dev.off()
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE,
size = 5)
g <- themeJasp(g)
g
gList1[[6]] <- g
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
dev.off()
g <- drawCanvas(xName = "Rank", yName = "Eigenvalue",
xBreaks = c(1, 50, 100), yBreaks = seq(0, 20, 5))
g <- drawPoints(graph = g, dat = data.frame(x = seq_along(L), y = L), show.legend = FALSE,
size = 4, alpha = .8)
g <- themeJasp(g)
gList1[[6]] <- g
# x11(width = 480, height = 320)
# grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
m = 2
w = 6; h = 4
cairo_pdf("introCorrelationPlot.pdf", width = w*m, height = h*m)
grid_arrange_shared_legend(plotList = gList1[4:6], nrow = 1, ncol = 3)
dev.off()
df <- read.table(text = "
Country  is_sale count
AU       1       10
AU       0       30
SE       1       5
SE       0       4 ", header = TRUE)
df
tapply(df$count, list(df$is_sale, df$Country), mean)
tapply(df$count, df$Country, sum)
tapply(df$count*df$is_sale, df$Country, sum) / tapply(df$count, df$Country, sum)
?psych::alpha
